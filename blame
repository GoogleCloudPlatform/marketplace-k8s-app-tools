608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    1) # Copyright 2018 Google LLC
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    2) #
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    3) # Licensed under the Apache License, Version 2.0 (the "License");
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    4) # you may not use this file except in compliance with the License.
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    5) # You may obtain a copy of the License at
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    6) #
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    7) #      http://www.apache.org/licenses/LICENSE-2.0
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    8) #
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700    9) # Unless required by applicable law or agreed to in writing, software
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   10) # distributed under the License is distributed on an "AS IS" BASIS,
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   11) # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   12) # See the License for the specific language governing permissions and
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   13) # limitations under the License.
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   14) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   15) import tempfile
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   16) import unittest
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   17) 
0abe3a8a (Huy Huynh                     2018-05-04 13:56:16 -0700   18) import config_helper
0abe3a8a (Huy Huynh                     2018-05-04 13:56:16 -0700   19) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   20) SCHEMA = """
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   21) properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   22)   propertyString:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   23)     type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   24)   propertyStringWithDefault:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   25)     type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   26)     default: DefaultString
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   27)   propertyInt:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   28)     type: int
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   29)   propertyIntWithDefault:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   30)     type: int
b01e22ec (Huy Huynh                     2018-06-07 17:15:59 -0700   31)     default: 3
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   32)   propertyInteger:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   33)     type: integer
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   34)   propertyIntegerWithDefault:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   35)     type: integer
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   36)     default: 6
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   37)   propertyNumber:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   38)     type: number
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   39)   propertyNumberWithDefault:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   40)     type: number
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   41)     default: 1.0
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700   42)   propertyBoolean:
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700   43)     type: boolean
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700   44)   propertyBooleanWithDefault:
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700   45)     type: boolean
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700   46)     default: false
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700   47)   propertyImage:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700   48)     type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700   49)     default: gcr.io/google/busybox:1.0
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700   50)     x-google-marketplace:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700   51)       type: IMAGE
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700   52)   propertyDeployerImage:
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700   53)     type: string
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700   54)     x-google-marketplace:
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700   55)       type: DEPLOYER_IMAGE
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   56)   propertyPassword:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   57)     type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   58)     x-google-marketplace:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   59)       type: GENERATED_PASSWORD
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   60)       length: 4
71a7067f (TK Kiatkungwanglai            2018-10-10 11:30:00 -0700   61)   applicationUid:
71a7067f (TK Kiatkungwanglai            2018-10-10 11:30:00 -0700   62)     type: string
71a7067f (TK Kiatkungwanglai            2018-10-10 11:30:00 -0700   63)     x-google-marketplace:
71a7067f (TK Kiatkungwanglai            2018-10-10 11:30:00 -0700   64)       type: APPLICATION_UID
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700   65)   istioEnabled:
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700   66)     type: boolean
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700   67)     x-google-marketplace:
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700   68)       type: ISTIO_ENABLED
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700   69)   ingressAvailable:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700   70)     type: boolean
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700   71)     x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700   72)       type: INGRESS_AVAILABLE
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   73)   certificate:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   74)     type: string
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   75)     x-google-marketplace:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   76)       type: TLS_CERTIFICATE
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   77)       tlsCertificate:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   78)         generatedProperties:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   79)           base64EncodedPrivateKey: keyEncoded
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200   80)           base64EncodedCertificate: crtEncoded
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   81)   customSecret:
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   82)     title: Secret needed by the app.
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   83)     description: User-entered text to be masked in the UI.
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   84)     type: string
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   85)     x-google-marketplace:
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100   86)       type: MASKED_FIELD
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   87) required:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   88) - propertyString
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   89) - propertyPassword
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700   90) form:
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700   91) - widget: help
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700   92)   description: My arbitrary <i>description</i>
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   93) """
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   94) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   95) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   96) class ConfigHelperTest(unittest.TestCase):
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   97) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700   98)   def test_load_yaml_file(self):
3461767c (Vini Ruela                    2019-12-09 17:43:36 -0800   99)     with tempfile.NamedTemporaryFile('w', encoding='utf-8') as f:
5dd9d89e (Vini Ruela                    2019-10-14 15:09:03 -0700  100)       f.write(SCHEMA)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  101)       f.flush()
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  102) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  103)       schema = config_helper.Schema.load_yaml_file(f.name)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  104)       schema_from_str = config_helper.Schema.load_yaml(SCHEMA)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  105)       self.assertEqual(schema.properties, schema_from_str.properties)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  106)       self.assertEqual(schema.required, schema_from_str.required)
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700  107)       self.assertEqual(schema.form, schema_from_str.form)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  108) 
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  109)   def test_bad_required(self):
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  110) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  111)     def load_and_validate(schema_yaml):
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  112)       schema = config_helper.Schema.load_yaml(schema_yaml)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  113)       schema.validate()
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  114) 
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  115)     schema_yaml = """
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  116)                   properties:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  117)                     propertyA:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  118)                       type: string
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  119)                   required:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  120)                   - propertyA
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  121)                   - propertyB
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  122)                   - propertyC
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  123)                   """
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  124)     self.assertRaisesRegex(config_helper.InvalidSchema,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  125)                             r'propertyB, propertyC', load_and_validate,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  126)                             schema_yaml)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  127) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  128)   def test_types_and_defaults(self):
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  129)     schema = config_helper.Schema.load_yaml(SCHEMA)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  130)     self.assertEqual(
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  131)         {
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  132)             'propertyString', 'propertyStringWithDefault', 'propertyInt',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  133)             'propertyIntWithDefault', 'propertyInteger',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  134)             'propertyIntegerWithDefault', 'propertyNumber',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  135)             'propertyNumberWithDefault', 'propertyBoolean',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  136)             'propertyBooleanWithDefault', 'propertyImage',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  137)             'propertyDeployerImage', 'propertyPassword', 'applicationUid',
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100  138)             'istioEnabled', 'ingressAvailable', 'certificate', 'customSecret'
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  139)         }, set(schema.properties))
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  140)     self.assertEqual(str, schema.properties['propertyString'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  141)     self.assertIsNone(schema.properties['propertyString'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  142)     self.assertEqual(str, schema.properties['propertyStringWithDefault'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  143)     self.assertEqual('DefaultString',
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  144)                      schema.properties['propertyStringWithDefault'].default)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  145)     self.assertEqual(int, schema.properties['propertyInt'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  146)     self.assertIsNone(schema.properties['propertyInt'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  147)     self.assertEqual(int, schema.properties['propertyIntWithDefault'].type)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  148)     self.assertEqual(3, schema.properties['propertyIntWithDefault'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  149)     self.assertEqual(int, schema.properties['propertyInteger'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  150)     self.assertIsNone(schema.properties['propertyInteger'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  151)     self.assertEqual(int, schema.properties['propertyIntegerWithDefault'].type)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  152)     self.assertEqual(6, schema.properties['propertyIntegerWithDefault'].default)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  153)     self.assertEqual(float, schema.properties['propertyNumber'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  154)     self.assertIsNone(schema.properties['propertyNumber'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  155)     self.assertEqual(float, schema.properties['propertyNumberWithDefault'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  156)     self.assertEqual(1.0,
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  157)                      schema.properties['propertyNumberWithDefault'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  158)     self.assertEqual(bool, schema.properties['propertyBoolean'].type)
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  159)     self.assertIsNone(schema.properties['propertyBoolean'].default)
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  160)     self.assertEqual(bool, schema.properties['propertyBooleanWithDefault'].type)
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  161)     self.assertEqual(False,
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  162)                      schema.properties['propertyBooleanWithDefault'].default)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  163)     self.assertEqual(str, schema.properties['propertyImage'].type)
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  164)     self.assertEqual('gcr.io/google/busybox:1.0',
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  165)                      schema.properties['propertyImage'].default)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  166)     self.assertEqual('IMAGE', schema.properties['propertyImage'].xtype)
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  167)     self.assertEqual('DEPLOYER_IMAGE',
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  168)                      schema.properties['propertyDeployerImage'].xtype)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  169)     self.assertEqual(str, schema.properties['propertyPassword'].type)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  170)     self.assertIsNone(schema.properties['propertyPassword'].default)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  171)     self.assertEqual('GENERATED_PASSWORD',
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  172)                      schema.properties['propertyPassword'].xtype)
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700  173)     self.assertEqual('My arbitrary <i>description</i>',
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700  174)                      schema.form[0]['description'])
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  175)     self.assertEqual(bool, schema.properties['istioEnabled'].type)
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  176)     self.assertEqual('ISTIO_ENABLED', schema.properties['istioEnabled'].xtype)
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  177)     self.assertEqual(bool, schema.properties['ingressAvailable'].type)
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  178)     self.assertEqual('INGRESS_AVAILABLE',
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  179)                      schema.properties['ingressAvailable'].xtype)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  180)     self.assertEqual(str, schema.properties['certificate'].type)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  181)     self.assertEqual('TLS_CERTIFICATE', schema.properties['certificate'].xtype)
dee611de (Erika Shiroma                 2019-10-01 21:01:32 +0100  182)     self.assertEqual('MASKED_FIELD', schema.properties['customSecret'].xtype)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  183) 
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  184)   def test_invalid_names(self):
b01e22ec (Huy Huynh                     2018-06-07 17:15:59 -0700  185)     self.assertRaises(
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  186)         config_helper.InvalidSchema, lambda: config_helper.Schema.load_yaml("""
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  187)             properties:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  188)               bad/name:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  189)                 type: string
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  190)             """))
b01e22ec (Huy Huynh                     2018-06-07 17:15:59 -0700  191) 
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  192)   def test_valid_names(self):
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  193)     config_helper.Schema.load_yaml("""
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  194)         properties:
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  195)           a-good_name:
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  196)             type: string
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  197)         """)
a599fdb5 (Huy Huynh                     2018-10-10 11:09:25 -0700  198) 
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  199)   def test_invalid_property_types(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  200)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  201)         config_helper.InvalidSchema, r'.*must be of type string$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  202)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  203)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  204)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  205)                 type: integer
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  206)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  207)                   type: NAME
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  208)             """))
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  209)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  210)         config_helper.InvalidSchema, r'.*must be of type string$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  211)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  212)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  213)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  214)                 type: number
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  215)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  216)                   type: NAMESPACE
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  217)             """))
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  218)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  219)         config_helper.InvalidSchema, r'.*must be of type string$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  220)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  221)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  222)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  223)                 type: int
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  224)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  225)                   type: DEPLOYER_IMAGE
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  226)             """))
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  227)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  228)         config_helper.InvalidSchema, r'.*must be of type string$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  229)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  230)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  231)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  232)                 type: boolean
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  233)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  234)                   type: APPLICATION_UID
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  235)             """))
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  236)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  237)         config_helper.InvalidSchema, r'.*must be of type boolean$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  238)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  239)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  240)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  241)                 type: string
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  242)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  243)                   type: ISTIO_ENABLED
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  244)             """))
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  245)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  246)         config_helper.InvalidSchema, r'.*must be of type boolean$',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  247)         lambda: config_helper.Schema.load_yaml("""
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  248)             properties:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  249)               u:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  250)                 type: string
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  251)                 x-google-marketplace:
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  252)                   type: INGRESS_AVAILABLE
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  253)             """))
192967af (Huy Huynh                     2019-03-15 13:29:40 -0700  254) 
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  255)   def test_required(self):
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  256)     schema = config_helper.Schema.load_yaml(SCHEMA)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  257)     self.assertTrue(schema.properties['propertyString'].required)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  258)     self.assertTrue(schema.properties['propertyPassword'].required)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  259)     self.assertFalse(schema.properties['propertyInt'].required)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  260)     self.assertFalse(schema.properties['propertyNumberWithDefault'].required)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  261) 
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  262)   def test_schema_properties_matching(self):
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  263)     schema = config_helper.Schema.load_yaml(SCHEMA)
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  264)     self.assertEqual([schema.properties['propertyPassword']],
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  265)                      schema.properties_matching({
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  266)                          'x-google-marketplace': {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  267)                              'type': 'GENERATED_PASSWORD'
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  268)                          }
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  269)                      }))
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  270)     self.assertEqual([
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  271)         schema.properties['propertyInt'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  272)         schema.properties['propertyIntWithDefault']
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  273)     ], schema.properties_matching({
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  274)         'type': 'int',
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  275)     }))
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  276) 
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  277)   def test_name_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  278)     schema = config_helper.Schema.load_yaml("""
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  279)         properties:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  280)           n:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  281)             type: string
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  282)             x-google-marketplace:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  283)               type: NAME
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  284)         """)
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  285)     self.assertIsNotNone(schema.properties['n'])
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  286) 
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  287)   def test_namespace_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  288)     schema = config_helper.Schema.load_yaml("""
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  289)         properties:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  290)           ns:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  291)             type: string
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  292)             x-google-marketplace:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  293)               type: NAMESPACE
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  294)         """)
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  295)     self.assertIsNotNone(schema.properties['ns'])
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  296) 
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  297)   def test_application_uid_type(self):
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  298)     schema = config_helper.Schema.load_yaml("""
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  299)         properties:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  300)           u:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  301)             type: string
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  302)             x-google-marketplace:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  303)               type: APPLICATION_UID
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  304)         """)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  305)     self.assertIsNotNone(schema.properties['u'].application_uid)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  306)     self.assertIsNone(schema.properties['u'].application_uid.application_create)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  307) 
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  308)   def test_application_uid_type_create_application(self):
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  309)     schema = config_helper.Schema.load_yaml("""
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  310)         properties:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  311)           u:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  312)             type: string
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  313)             x-google-marketplace:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  314)               type: APPLICATION_UID
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  315)               applicationUid:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  316)                 generatedProperties:
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  317)                   createApplicationBoolean: application.create
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  318)         """)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  319)     self.assertIsNotNone(schema.properties['u'].application_uid)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  320)     self.assertEqual('application.create',
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  321)                      schema.properties['u'].application_uid.application_create)
8b73ef65 (Huy Huynh                     2019-01-29 14:57:08 -0800  322) 
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  323)   def test_image_default_missing(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  324)     self.assertRaisesRegex(
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  325)         config_helper.InvalidSchema, r'.*default image value must be specified',
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  326)         lambda: config_helper.Schema.load_yaml("""
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  327)         properties:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  328)           i:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  329)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  330)             x-google-marketplace:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  331)               type: IMAGE
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  332)         """))
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  333) 
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  334)   def test_image_default_missing_repo(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  335)     self.assertRaisesRegex(
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  336)         config_helper.InvalidSchema,
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  337)         r'.*default image value must state registry',
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  338)         lambda: config_helper.Schema.load_yaml("""
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  339)         properties:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  340)           i:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  341)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  342)             default: $REGISTRY/some-repo:some-tag
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  343)             x-google-marketplace:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  344)               type: IMAGE
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  345)         """))
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  346) 
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  347)   def test_image_default_missing_tag_or_digest(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  348)     self.assertRaisesRegex(
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  349)         config_helper.InvalidSchema,
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  350)         r'.*default image value is missing a tag or digest',
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  351)         lambda: config_helper.Schema.load_yaml("""
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  352)         properties:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  353)           i:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  354)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  355)             default: gcr.io/some-repo
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  356)             x-google-marketplace:
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  357)               type: IMAGE
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  358)         """))
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  359) 
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  360)   def test_image_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  361)     schema = config_helper.Schema.load_yaml("""
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  362)         properties:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  363)           i:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  364)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  365)             default: gcr.io/some-repo:some-tag
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  366)             x-google-marketplace:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  367)               type: IMAGE
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  368)         """)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  369)     self.assertIsNotNone(schema.properties['i'].image)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  370)     self.assertIsNone(schema.properties['i'].image.split_by_colon)
5dd9d89e (Vini Ruela                    2019-10-14 15:09:03 -0700  371)     self.assertIsNone(schema.properties['i'].image.split_to_registry_repo_tag)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  372) 
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  373)   def test_image_type_splitbycolon(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  374)     schema = config_helper.Schema.load_yaml("""
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  375)         properties:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  376)           i:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  377)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  378)             default: gcr.io/some-repo:some-tag
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  379)             x-google-marketplace:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  380)               type: IMAGE
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  381)               image:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  382)                 generatedProperties:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  383)                   splitByColon:
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  384)                     before: image.before
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  385)                     after: image.after
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  386)         """)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  387)     self.assertIsNotNone(schema.properties['i'].image)
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  388)     self.assertEqual(('image.before', 'image.after'),
8f3454ac (Huy Huynh                     2018-07-12 15:21:11 -0700  389)                      schema.properties['i'].image.split_by_colon)
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  390) 
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  391)   def test_image_type_splittoregistryrepotag(self):
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  392)     schema = config_helper.Schema.load_yaml("""
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  393)         properties:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  394)           i:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  395)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  396)             default: gcr.io/some-repo:some-tag
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  397)             x-google-marketplace:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  398)               type: IMAGE
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  399)               image:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  400)                 generatedProperties:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  401)                   splitToRegistryRepoTag:
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  402)                     registry: image.registry
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  403)                     repo: image.repo
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  404)                     tag: image.tag
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  405)         """)
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  406)     self.assertIsNotNone(schema.properties['i'].image)
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  407)     self.assertEqual(('image.registry', 'image.repo', 'image.tag'),
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  408)                      schema.properties['i'].image._split_to_registry_repo_tag)
1822f1d5 (Huy Huynh                     2018-10-09 14:24:24 -0700  409) 
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  410)   def test_deployer_image_type(self):
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  411)     schema = config_helper.Schema.load_yaml("""
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  412)         properties:
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  413)           di:
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  414)             type: string
0be11f49 (Erika Shiroma                 2019-07-17 14:57:18 -0700  415)             default: gcr.io/some-repo:some-tag
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  416)             x-google-marketplace:
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  417)               type: DEPLOYER_IMAGE
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  418)         """)
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  419)     self.assertIsNotNone(schema.properties['di'])
9423c06c (TK Kiatkungwanglai            2018-10-23 12:04:38 -0700  420) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  421)   def test_password(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  422)     schema = config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  423)         properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  424)           pw:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  425)             type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  426)             x-google-marketplace:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  427)               type: GENERATED_PASSWORD
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  428)         """)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  429)     self.assertEqual(10, schema.properties['pw'].password.length)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  430)     self.assertEqual(False, schema.properties['pw'].password.include_symbols)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  431)     self.assertEqual(True, schema.properties['pw'].password.base64)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  432) 
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  433)     schema = config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  434)         properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  435)           pw:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  436)             type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  437)             x-google-marketplace:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  438)               type: GENERATED_PASSWORD
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  439)               generatedPassword:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  440)                 length: 5
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  441)                 includeSymbols: true
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  442)                 base64: false
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  443)         """)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  444)     self.assertEqual(5, schema.properties['pw'].password.length)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  445)     self.assertEqual(True, schema.properties['pw'].password.include_symbols)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  446)     self.assertEqual(False, schema.properties['pw'].password.base64)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  447) 
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  448)   def test_certificate(self):
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  449)     schema = config_helper.Schema.load_yaml("""
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  450)         properties:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  451)           c1:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  452)             type: string
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  453)             x-google-marketplace:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  454)               type: TLS_CERTIFICATE
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  455)         """)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  456) 
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  457)     self.assertIsNotNone(schema.properties['c1'].tls_certificate)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  458)     self.assertIsNone(
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  459)         schema.properties['c1'].tls_certificate.base64_encoded_private_key)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  460)     self.assertIsNone(
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  461)         schema.properties['c1'].tls_certificate.base64_encoded_certificate)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  462) 
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  463)     schema = config_helper.Schema.load_yaml("""
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  464)         properties:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  465)           c1:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  466)             type: string
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  467)             x-google-marketplace:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  468)               type: TLS_CERTIFICATE
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  469)               tlsCertificate:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  470)                 generatedProperties:
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  471)                   base64EncodedPrivateKey: c1.Base64Key
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  472)                   base64EncodedCertificate: c1.Base64Crt
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  473)         """)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  474)     self.assertIsNotNone(schema.properties['c1'].tls_certificate)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  475)     self.assertEqual(
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  476)         'c1.Base64Key',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  477)         schema.properties['c1'].tls_certificate.base64_encoded_private_key)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  478)     self.assertEqual(
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  479)         'c1.Base64Crt',
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  480)         schema.properties['c1'].tls_certificate.base64_encoded_certificate)
120d7765 (wgrzelak                      2019-04-23 22:15:41 +0200  481) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  482)   def test_int_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  483)     schema = config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  484)         properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  485)           pi:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  486)             type: int
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  487)         """)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  488)     self.assertEqual(5, schema.properties['pi'].str_to_type('5'))
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  489) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  490)   def test_number_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  491)     schema = config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  492)         properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  493)           pn:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  494)             type: number
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  495)         """)
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  496)     self.assertEqual(5.2, schema.properties['pn'].str_to_type('5.2'))
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  497) 
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  498)   def test_boolean_type(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  499)     schema = config_helper.Schema.load_yaml("""
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  500)         properties:
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  501)           pb:
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  502)             type: boolean
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  503)         """)
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  504)     self.assertEqual(True, schema.properties['pb'].str_to_type('true'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  505)     self.assertEqual(True, schema.properties['pb'].str_to_type('True'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  506)     self.assertEqual(True, schema.properties['pb'].str_to_type('yes'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  507)     self.assertEqual(True, schema.properties['pb'].str_to_type('Yes'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  508)     self.assertEqual(False, schema.properties['pb'].str_to_type('false'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  509)     self.assertEqual(False, schema.properties['pb'].str_to_type('False'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  510)     self.assertEqual(False, schema.properties['pb'].str_to_type('no'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  511)     self.assertEqual(False, schema.properties['pb'].str_to_type('No'))
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  512)     self.assertRaises(config_helper.InvalidValue,
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700  513)                       lambda: schema.properties['pb'].str_to_type('bad'))
8234d896 (Huy Huynh                     2018-05-08 18:40:58 -0700  514) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  515)   def test_invalid_default_type(self):
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  516)     self.assertRaises(
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  517)         config_helper.InvalidSchema, lambda: config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  518)             properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  519)               pn:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  520)                 type: number
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  521)                 default: abc
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  522)             """))
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  523) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  524)   def test_property_matches_definition(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  525)     schema = config_helper.Schema.load_yaml("""
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  526)         properties:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  527)           propertyInt:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  528)             type: int
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  529)           propertyPassword:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  530)             type: string
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  531)             x-google-marketplace:
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  532)               type: GENERATED_PASSWORD
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  533)         """)
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  534)     self.assertTrue(schema.properties['propertyInt'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  535)         {'name': 'propertyInt'}))
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  536)     self.assertFalse(schema.properties['propertyInt'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  537)         {'name': 'propertyPassword'}))
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  538)     self.assertTrue(schema.properties['propertyInt'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  539)         {'type': 'int'}))
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  540)     self.assertFalse(schema.properties['propertyInt'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  541)         {'type': 'string'}))
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  542)     self.assertFalse(schema.properties['propertyInt'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  543)         {'x-google-marketplace': {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  544)             'type': 'GENERATED_PASSWORD'
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  545)         }}))
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  546)     self.assertTrue(schema.properties['propertyPassword'].matches_definition(
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  547)         {'x-google-marketplace': {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  548)             'type': 'GENERATED_PASSWORD'
60afa3f6 (wgrzelak                      2019-02-11 21:47:17 +0100  549)         }}))
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  550)     self.assertTrue(schema.properties['propertyPassword'].matches_definition({
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  551)         'type': 'string',
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  552)         'x-google-marketplace': {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  553)             'type': 'GENERATED_PASSWORD'
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  554)         }
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  555)     }))
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700  556) 
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  557)   def test_defaults_bad_type(self):
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  558)     self.assertRaises(
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  559)         config_helper.InvalidSchema, lambda: config_helper.Schema.load_yaml("""
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  560)             properties:
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  561)               p1:
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  562)                 type: string
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  563)                 default: 10
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  564)             """))
3d6ddd82 (Huy Huynh                     2018-05-08 18:22:06 -0700  565) 
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  566)   def test_service_account(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  567)     schema = config_helper.Schema.load_yaml("""
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  568)         properties:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  569)           sa:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  570)             type: string
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  571)             x-google-marketplace:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  572)               type: SERVICE_ACCOUNT
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  573)               serviceAccount:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  574)                 roles:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  575)                 - type: ClusterRole
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  576)                   rulesType: PREDEFINED
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  577)                   rulesFromRoleName: cluster-admin
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  578)                 - type: ClusterRole
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  579)                   rulesType: PREDEFINED
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  580)                   rulesFromRoleName: admin
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  581)                 - type: Role
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  582)                   rulesType: PREDEFINED
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  583)                   rulesFromRoleName: edit
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  584)                 - type: Role
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  585)                   rulesType: PREDEFINED
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  586)                   rulesFromRoleName: view
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  587)                 - type: ClusterRole
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  588)                   rulesType: CUSTOM
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  589)                   rules:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  590)                   - apiGroups: ['v1']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  591)                     resources: ['Secret']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  592)                     verbs: ['*']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  593)                   - apiGroups: ['v1']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  594)                     resources: ['ConfigMap']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  595)                     verbs: ['*']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  596)                 - type: Role
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  597)                   rulesType: CUSTOM
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  598)                   rules:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  599)                   - apiGroups: ['apps/v1']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  600)                     resources: ['Deployment']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  601)                     verbs: ['*']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  602)                   - apiGroups: ['apps/v1']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  603)                     resources: ['StatefulSet']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  604)                     verbs: ['*']
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  605)         """)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  606)     sa = schema.properties['sa'].service_account
66974e81 (Huy Huynh                     2018-06-18 14:57:25 -0700  607)     self.assertIsNotNone(sa)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  608)     self.assertListEqual(['cluster-admin', 'admin'],
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  609)                          sa.predefined_cluster_roles())
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  610)     self.assertListEqual(['edit', 'view'], sa.predefined_roles())
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  611)     self.assertListEqual([[
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  612)         {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  613)             'apiGroups': ['v1'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  614)             'resources': ['Secret'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  615)             'verbs': ['*']
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  616)         },
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  617)         {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  618)             'apiGroups': ['v1'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  619)             'resources': ['ConfigMap'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  620)             'verbs': ['*']
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  621)         },
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  622)     ]], sa.custom_cluster_role_rules())
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  623)     self.assertListEqual([[
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  624)         {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  625)             'apiGroups': ['apps/v1'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  626)             'resources': ['Deployment'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  627)             'verbs': ['*']
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  628)         },
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  629)         {
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  630)             'apiGroups': ['apps/v1'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  631)             'resources': ['StatefulSet'],
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  632)             'verbs': ['*']
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  633)         },
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  634)     ]], sa.custom_role_rules())
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  635) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  636)   def test_service_account_missing_rulesType(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  637)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  638)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  639)         'rulesType must be one of PREDEFINED or CUSTOM'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  640)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  641)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  642)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  643)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  644)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  645)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  646)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  647)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  648)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  649)                     rulesFromRoleName: view
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  650)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  651) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  652)   def test_service_account_predefined_rules(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  653)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  654)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  655)         'rules can only be used with rulesType CUSTOM'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  656)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  657)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  658)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  659)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  660)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  661)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  662)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  663)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  664)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  665)                     rulesType: PREDEFINED
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  666)                     rules:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  667)                     - apiGroups: ['']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  668)                       resources: ['Deployment']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  669)                       verbs: ['*']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  670)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  671) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  672)   def test_service_account_predefined_missing_rulesFromRoleName(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  673)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  674)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  675)         'Missing rulesFromRoleName for PREDEFINED role'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  676)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  677)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  678)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  679)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  680)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  681)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  682)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  683)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  684)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  685)                     rulesType: PREDEFINED
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  686)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  687) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  688)   def test_service_account_custom_rulesFromRoleName(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  689)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  690)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  691)         'rulesFromRoleName can only be used with rulesType PREDEFINED'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  692)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  693)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  694)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  695)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  696)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  697)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  698)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  699)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  700)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  701)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  702)                     rulesFromRoleName: edit
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  703)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  704) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  705)   def test_service_account_custom_nonResourceAttributes(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  706)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  707)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  708)         'Only attributes for resourceRules are supported in rules'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  709)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  710)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  711)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  712)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  713)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  714)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  715)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  716)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  717)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  718)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  719)                     rules:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  720)                     - nonResourceURLs: ['/version', '/healthz']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  721)                       verbs: ["get"]
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  722)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  723) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  724)   def test_service_account_custom_missingRules(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  725)     with self.assertRaisesRegex(config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  726)                                  'Missing rules for CUSTOM role'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  727)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  728)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  729)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  730)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  731)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  732)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  733)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  734)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  735)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  736)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  737)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  738) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  739)   def test_service_account_custom_empty_apiGroups(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  740)     with self.assertRaisesRegex(
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  741)         config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  742)         r'^Missing or empty apiGroups in rules. Did you mean'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  743)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  744)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  745)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  746)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  747)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  748)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  749)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  750)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  751)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  752)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  753)                     rules:
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  754)                     - resources: ['Pods']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  755)                       verbs: ['*']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  756)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  757) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  758)   def test_service_account_custom_empty_resources(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  759)     with self.assertRaisesRegex(config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  760)                                  'Missing or empty resources in rules'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  761)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  762)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  763)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  764)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  765)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  766)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  767)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  768)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  769)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  770)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  771)                     rules:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  772)                     - apiGroups: ['v1']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  773)                       resources: ['']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  774)                       verbs: ['*']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  775)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  776) 
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  777)   def test_service_account_custom_empty_verbs(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  778)     with self.assertRaisesRegex(config_helper.InvalidSchema,
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  779)                                  'Missing or empty verbs in rules'):
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  780)       config_helper.Schema.load_yaml("""
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  781)           properties:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  782)             sa:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  783)               type: string
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  784)               x-google-marketplace:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  785)                 type: SERVICE_ACCOUNT
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  786)                 serviceAccount:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  787)                   roles:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  788)                   - type: Role
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  789)                     rulesType: CUSTOM
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  790)                     rules:
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  791)                     - apiGroups: ['v1']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  792)                       resources: ['Pods']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  793)                       verbs: ['']
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  794)           """)
47184fb4 (Erika Shiroma                 2019-12-05 13:58:03 -0800  795) 
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  796)   def test_storage_class(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  797)     schema = config_helper.Schema.load_yaml("""
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  798)         properties:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  799)           sc:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  800)             type: string
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  801)             x-google-marketplace:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  802)               type: STORAGE_CLASS
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  803)               storageClass:
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  804)                 type: SSD
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  805)         """)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  806)     self.assertIsNotNone(schema.properties['sc'].storage_class)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  807)     sc = schema.properties['sc'].storage_class
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  808)     self.assertTrue(sc.ssd)
822097c8 (Huy Huynh                     2018-06-13 20:21:55 -0700  809) 
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  810)   def test_xstring_base64(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  811)     schema = config_helper.Schema.load_yaml("""
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  812)         properties:
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  813)           s:
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  814)             type: string
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  815)             x-google-marketplace:
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  816)               type: STRING
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  817)               string:
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  818)                 generatedProperties:
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  819)                   base64Encoded: s.encoded
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  820)         """)
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  821)     xstring = schema.properties['s'].string
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  822)     self.assertIsNotNone(xstring)
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  823)     self.assertEqual('s.encoded', xstring.base64_encoded)
183d98a2 (Huy Huynh                     2018-07-13 12:08:21 -0700  824) 
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  825)   def test_reporting_secret(self):
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  826)     schema = config_helper.Schema.load_yaml("""
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  827)         properties:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  828)           rs:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  829)             type: string
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  830)             x-google-marketplace:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  831)               type: REPORTING_SECRET
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  832)         """)
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  833)     self.assertIsNotNone(schema.properties['rs'].reporting_secret)
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  834) 
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  835)   def test_unknown_type(self):
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700  836)     self.assertRaises(
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700  837)         config_helper.InvalidSchema, lambda: config_helper.Schema.load_yaml("""
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  838)             properties:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  839)               unk:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  840)                 type: string
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  841)                 x-google-marketplace:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  842)                   type: UNKNOWN
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  843)             """))
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700  844) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  845)   def test_v2_fields(self):
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  846)     schema = config_helper.Schema.load_yaml("""
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  847)         x-google-marketplace:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  848)           schemaVersion: v2
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  849) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  850)           applicationApiVersion: v1beta1
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  851) 
b2c33372 (Erika Shiroma                 2019-11-06 13:56:27 -0800  852)           publishedVersion: 6.5.130-metadata
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  853)           publishedVersionMetadata:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  854)             releaseNote: Bug fixes
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  855)             releaseTypes:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  856)             - BUG_FIX
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  857)             recommended: true
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  858) 
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  859)           managedUpdates:
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  860)             kalmSupported: true
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  861) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  862)           images:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  863)             main:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  864)               properties:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  865)                 main.image:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  866)                   type: FULL
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  867)             db:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  868)               properties:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  869)                 db.image.repo:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  870)                   type: REPO_WITH_REGISTRY
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  871)                 db.image.tag:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  872)                   type: TAG
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  873)         properties:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  874)           simple:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  875)             type: string
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  876)         """)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  877)     schema.validate()
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  878)     self.assertTrue(schema.x_google_marketplace.is_v2())
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  879)     self.assertEqual(schema.x_google_marketplace.app_api_version, 'v1beta1')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  880) 
b2c33372 (Erika Shiroma                 2019-11-06 13:56:27 -0800  881)     self.assertEqual(schema.x_google_marketplace.published_version,
b2c33372 (Erika Shiroma                 2019-11-06 13:56:27 -0800  882)                      '6.5.130-metadata')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  883)     version_meta = schema.x_google_marketplace.published_version_meta
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  884)     self.assertEqual(version_meta.release_note, 'Bug fixes')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  885)     self.assertListEqual(version_meta.release_types, ['BUG_FIX'])
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  886)     self.assertTrue(version_meta.recommended)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  887) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  888)     images = schema.x_google_marketplace.images
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  889)     self.assertTrue(isinstance(images, dict))
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  890)     self.assertEqual(len(images), 2)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  891)     self.assertEqual(images['main'].name, 'main')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  892)     self.assertEqual(len(images['main'].properties), 1)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  893)     self.assertEqual(images['main'].properties['main.image'].name, 'main.image')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  894)     self.assertEqual(images['main'].properties['main.image'].part_type, 'FULL')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  895)     self.assertEqual(images['db'].name, 'db')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  896)     self.assertEqual(len(images['db'].properties), 2)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  897)     self.assertEqual(images['db'].properties['db.image.repo'].name,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  898)                      'db.image.repo')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  899)     self.assertEqual(images['db'].properties['db.image.repo'].part_type,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  900)                      'REPO_WITH_REGISTRY')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  901)     self.assertEqual(images['db'].properties['db.image.tag'].name,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  902)                      'db.image.tag')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  903)     self.assertEqual(images['db'].properties['db.image.tag'].part_type, 'TAG')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  904) 
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  905)     self.assertEqual(schema.x_google_marketplace.managed_updates.kalm_supported,
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  906)                      True)
4f4bff3e (Huy Huynh                     2019-05-13 22:21:40 -0700  907) 
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  908)   def test_publishedVersion_semver(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  909)     with self.assertRaisesRegex(config_helper.InvalidSchema,
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  910)                                  'Invalid schema publishedVersion "6.5"'):
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  911)       config_helper.Schema.load_yaml("""
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  912)           x-google-marketplace:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  913)             schemaVersion: v2
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  914)             applicationApiVersion: v1beta1
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  915) 
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  916)             publishedVersion: '6.5'
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  917)             publishedVersionMetadata:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  918)               releaseNote: Bug fixes
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  919)             images:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  920)               main:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  921)                 properties:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  922)                   main.image:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  923)                     type: FULL
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  924)           properties:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  925)             simple:
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  926)               type: string
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  927)           """)
938918ba (Erika Shiroma                 2019-11-06 11:06:10 -0800  928) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  929)   def test_k8s_version_constraint(self):
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  930)     schema = config_helper.Schema.load_yaml("""
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  931)         applicationApiVersion: v1beta1
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  932)         properties:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  933)           simple:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  934)             type: string
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  935)         x-google-marketplace:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  936)           clusterConstraints:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  937)             k8sVersion: '>1.11'
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  938)         """)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  939)     schema.validate()
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  940)     self.assertEqual(
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  941)         schema.x_google_marketplace.cluster_constraints.k8s_version, '>1.11')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  942) 
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  943)   def test_resource_constraints(self):
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  944)     schema = config_helper.Schema.load_yaml("""
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  945)         applicationApiVersion: v1beta1
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  946)         properties:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  947)           simple:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  948)             type: string
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  949)         x-google-marketplace:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  950)           clusterConstraints:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  951)             resources:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  952)             - replicas: 3
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  953)               requests:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  954)                 cpu: 100m
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  955)                 memory: 512Gi
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  956)               affinity:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  957)                 simpleNodeAffinity:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  958)                   type: REQUIRE_ONE_NODE_PER_REPLICA
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  959)             - replicas: 5
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  960)               affinity:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  961)                 simpleNodeAffinity:
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  962)                   type: REQUIRE_MINIMUM_NODE_COUNT
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  963)                   minimumNodeCount: 4
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  964)         """)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  965)     schema.validate()
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  966)     resources = schema.x_google_marketplace.cluster_constraints.resources
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  967)     self.assertTrue(isinstance(resources, list))
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  968)     self.assertEqual(len(resources), 2)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  969)     self.assertEqual(resources[0].replicas, 3)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  970)     self.assertEqual(resources[0].requests.cpu, '100m')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  971)     self.assertEqual(resources[0].requests.memory, '512Gi')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  972)     self.assertEqual(resources[0].affinity.simple_node_affinity.affinity_type,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  973)                      'REQUIRE_ONE_NODE_PER_REPLICA')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  974)     self.assertIsNone(
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  975)         resources[0].affinity.simple_node_affinity.minimum_node_count)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  976)     self.assertEqual(resources[1].replicas, 5)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  977)     self.assertIsNone(resources[1].requests)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  978)     self.assertEqual(resources[1].affinity.simple_node_affinity.affinity_type,
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  979)                      'REQUIRE_MINIMUM_NODE_COUNT')
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  980)     self.assertEqual(
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  981)         resources[1].affinity.simple_node_affinity.minimum_node_count, 4)
0cd12cf4 (Huy Huynh                     2019-02-28 14:52:03 -0800  982) 
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  983)   def test_istio_valid_type(self):
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  984)     schema = config_helper.Schema.load_yaml("""
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  985)         applicationApiVersion: v1beta1
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  986)         properties:
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  987)           simple:
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  988)             type: string
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  989)         x-google-marketplace:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  990)           clusterConstraints:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  991)             istio:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  992)               type: OPTIONAL
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  993)         """)
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700  994)     schema.validate()
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  995)     self.assertEqual(schema.x_google_marketplace.cluster_constraints.istio.type,
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  996)                      "OPTIONAL")
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  997) 
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700  998)   def test_istio_invalid_type(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800  999)     with self.assertRaisesRegex(config_helper.InvalidSchema,
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1000)                                  "Invalid type of istio constraint"):
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1001)       config_helper.Schema.load_yaml("""
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1002)           applicationApiVersion: v1beta1
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1003)           properties:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1004)             simple:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1005)               type: string
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1006)           x-google-marketplace:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1007)             clusterConstraints:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1008)               istio:
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1009)                 type: INVALID_TYPE
0cf5be45 (Vinicius Canaa Medeiros Ruela 2019-03-12 17:35:25 -0700 1010)           """)
4199d2cd (Vinicius Canaa Medeiros Ruela 2019-03-11 14:21:31 -0700 1011) 
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1012)   def test_required_oauth_scopes_valid(self):
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1013)     schema = config_helper.Schema.load_yaml("""
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1014)       applicationApiVersion: v1beta1
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1015)       properties:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1016)         simple:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1017)           type: string
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1018)       x-google-marketplace:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1019)         clusterConstraints:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1020)           gcp:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1021)             nodes:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1022)               requiredOauthScopes:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1023)               - https://www.googleapis.com/auth/cloud-platform
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1024)       """)
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1025)     schema.validate()
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1026)     self.assertEqual(
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1027)         schema.x_google_marketplace.cluster_constraints.gcp.nodes
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1028)         .required_oauth_scopes,
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1029)         ["https://www.googleapis.com/auth/cloud-platform"])
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1030) 
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1031)   def test_required_oauth_scopes_invalid_scope(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1032)     with self.assertRaisesRegex(
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1033)         config_helper.InvalidSchema,
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1034)         "OAuth scope references must be fully-qualified"):
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1035)       config_helper.Schema.load_yaml("""
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1036)         applicationApiVersion: v1beta1
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1037)         properties:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1038)           simple:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1039)             type: string
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1040)         x-google-marketplace:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1041)           clusterConstraints:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1042)             gcp:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1043)               nodes:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1044)                 requiredOauthScopes:
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1045)                 - cloud-platform
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1046)         """)
0346da96 (Erika Shiroma                 2019-10-30 10:26:47 -0700 1047) 
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1048)   def test_deployer_service_account(self):
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1049)     schema = config_helper.Schema.load_yaml("""
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1050)         x-google-marketplace:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1051)           # v2 required fields
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1052)           schemaVersion: v2
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1053)           applicationApiVersion: v1beta1
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1054)           publishedVersion: 6.5.130
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1055)           publishedVersionMetadata:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1056)             releaseNote: Bug fixes
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1057)             releaseTypes:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1058)             - BUG_FIX
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1059)           images:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1060)             main:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1061)               properties:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1062)                 main.image:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1063)                   type: FULL
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1064) 
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1065)           deployerServiceAccount:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1066)             roles:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1067)             - type: ClusterRole
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1068)               rulesType: PREDEFINED
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1069)               rulesFromRoleName: cluster-admin
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1070)             - type: ClusterRole
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1071)               rulesType: PREDEFINED
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1072)               rulesFromRoleName: admin
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1073)             - type: Role
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1074)               rulesType: PREDEFINED
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1075)               rulesFromRoleName: edit
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1076)             - type: Role
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1077)               rulesType: PREDEFINED
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1078)               rulesFromRoleName: view
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1079)             - type: ClusterRole
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1080)               rulesType: CUSTOM
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1081)               rules:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1082)               - apiGroups: ['v1']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1083)                 resources: ['Secret']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1084)                 verbs: ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1085)               - apiGroups: ['v1']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1086)                 resources: ['ConfigMap']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1087)                 verbs: ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1088)             - type: Role
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1089)               rulesType: CUSTOM
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1090)               rules:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1091)               - apiGroups: ['apps/v1']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1092)                 resources: ['Deployment']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1093)                 verbs: ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1094)               - apiGroups: ['apps/v1']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1095)                 resources: ['StatefulSet']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1096)                 verbs: ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1097)         properties:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1098)           simple:
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1099)             type: string
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1100)       """)
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1101)     dsa = schema.x_google_marketplace.deployer_service_account
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1102)     self.assertIsNotNone(dsa)
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1103)     self.assertListEqual(['cluster-admin', 'admin'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1104)                          dsa.predefined_cluster_roles())
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1105)     self.assertListEqual(['edit', 'view'], dsa.predefined_roles())
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1106)     self.assertListEqual([[
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1107)         {
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1108)             'apiGroups': ['v1'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1109)             'resources': ['Secret'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1110)             'verbs': ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1111)         },
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1112)         {
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1113)             'apiGroups': ['v1'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1114)             'resources': ['ConfigMap'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1115)             'verbs': ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1116)         },
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1117)     ]], dsa.custom_cluster_role_rules())
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1118)     self.assertListEqual([[
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1119)         {
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1120)             'apiGroups': ['apps/v1'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1121)             'resources': ['Deployment'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1122)             'verbs': ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1123)         },
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1124)         {
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1125)             'apiGroups': ['apps/v1'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1126)             'resources': ['StatefulSet'],
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1127)             'verbs': ['*']
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1128)         },
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1129)     ]], dsa.custom_role_rules())
a2ebf5e0 (Erika Shiroma                 2019-08-21 14:43:41 -0700 1130) 
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1131)   def test_validate_good(self):
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1132)     schema = config_helper.Schema.load_yaml("""
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1133)         applicationApiVersion: v1beta1
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1134)         properties:
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1135)           simple:
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1136)             type: string
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1137)         """)
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1138)     schema.validate()
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1139) 
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1140)   def test_app_api_version_alternative_names(self):
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1141)     schema = config_helper.Schema.load_yaml("""
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1142)         applicationApiVersion: v1beta1
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1143)         properties:
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1144)           simple:
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1145)             type: string
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1146)         """)
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1147)     schema.validate()
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1148)     self.assertEqual(schema.app_api_version, 'v1beta1')
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1149) 
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700 1150)     schema = config_helper.Schema.load_yaml("""
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1151)         application_api_version: v1beta1
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700 1152)         properties:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1153)           simple:
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700 1154)             type: string
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700 1155)         """)
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1156)     schema.validate()
d8dbfff7 (Huy Huynh                     2018-08-22 16:49:40 -0700 1157)     self.assertEqual(schema.app_api_version, 'v1beta1')
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1158) 
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1159)   def test_validate_missing_app_api_version(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1160)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1161)         config_helper.InvalidSchema, 'applicationApiVersion',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1162)         lambda: config_helper.Schema.load_yaml("""
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1163)             properties:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1164)               simple:
22a4c849 (Huy Huynh                     2018-07-23 14:26:50 -0700 1165)                 type: string
57370158 (Huy Huynh                     2018-08-06 14:12:06 -0700 1166)             """).validate())
4f7b4e3e (TK Kiatkungwanglai            2018-06-27 15:12:54 -0700 1167) 
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1168)   def test_validate_bad_form_too_many_items(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1169)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1170)         config_helper.InvalidSchema, 'form',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1171)         lambda: config_helper.Schema.load_yaml("""
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1172)             applicationApiVersion: v1beta1
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1173)             form:
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1174)             - widget: help
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1175)               description: My arbitrary <i>description</i>
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1176)             - widget: help
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1177)               description: My arbitrary <i>description</i>
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1178)             """).validate())
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1179) 
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1180)   def test_validate_bad_form_missing_type(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1181)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1182)         config_helper.InvalidSchema, 'form',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1183)         lambda: config_helper.Schema.load_yaml("""
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1184)             applicationApiVersion: v1beta1
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1185)             form:
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1186)             - description: My arbitrary <i>description</i>
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1187)             """).validate())
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1188) 
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1189)   def test_validate_bad_form_unrecognized_type(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1190)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1191)         config_helper.InvalidSchema, 'form',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1192)         lambda: config_helper.Schema.load_yaml("""
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1193)             applicationApiVersion: v1beta1
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1194)             form:
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1195)             - widget: magical
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1196)               description: My arbitrary <i>description</i>
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1197)             """).validate())
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1198) 
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1199)   def test_validate_bad_form_missing_description(self):
00000000 (Not Committed Yet             2019-12-10 17:52:41 -0800 1200)     self.assertRaisesRegex(
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1201)         config_helper.InvalidSchema, 'form',
77116584 (Jeremy Volkman                2019-07-16 10:57:34 -0700 1202)         lambda: config_helper.Schema.load_yaml("""
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1203)             applicationApiVersion: v1beta1
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1204)             form:
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1205)             - widget: help
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1206)             """).validate())
36213d8b (TK Kiatkungwanglai            2018-10-08 18:44:12 -0700 1207) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700 1208) 
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700 1209) if __name__ == 'main':
608b3c93 (Huy Huynh                     2018-05-04 11:57:23 -0700 1210)   unittest.main()
