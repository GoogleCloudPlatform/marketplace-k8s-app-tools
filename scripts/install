#!/bin/bash
#
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eo pipefail

for i in "$@"
do
case $i in
  --deployer=*)
    deployer="${i#*=}"
    shift
    ;;
  --parameters=*)
    parameters="${i#*=}"
    shift
    ;;
  --entrypoint=*)
    entrypoint="${i#*=}"
    shift
    ;;
  --image_pull_secret=*)
    image_pull_secret="${i#*=}"
    shift
    ;;
  *)
    >&2 echo "Unrecognized flag: $i"
    exit 1
    ;;
esac
done

[[ -z "$deployer" ]] && >&2 echo "--deployer required" && exit 1
[[ -z "$parameters" ]] && >&2 echo "--parameters required" && exit 1
[[ -z "$entrypoint" ]] && entrypoint="/bin/deploy.sh"

# Extract schema and values files.
docker run \
    -i \
    --entrypoint=/bin/bash \
    --rm "${deployer}" \
    -c 'cat /data/schema.yaml' \
> /data/schema.yaml
echo "$parameters" \
  | json2yaml \
> /data/values.yaml

# Extract name, namespace, and api version.
name="$(print_config.py \
    --values_mode raw \
    --xtype NAME)"
namespace="$(print_config.py \
    --values_mode raw \
    --xtype NAMESPACE)"
app_version="$(print_app_api_version.py)"

if [[ -z "$image_pull_secret" ]]; then
  # Check the namespace annotation.
  image_pull_secret="$(kubectl get namespace ${namespace} --ignore-not-found -o json \
    | jq '.metadata.annotations["marketplace.cloud.google.com/imagePullSecret"]' \
    | jq --raw-output 'select(. != null)')"
fi

# Create Application instance.
kubectl apply --namespace="$namespace" --filename=- <<EOF
apiVersion: "app.k8s.io/${app_version}"
kind: Application
metadata:
  name: "${name}"
  namespace: "${namespace}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "${name}"
  assemblyPhase: "Pending"
EOF

app_uid=$(kubectl get "applications.app.k8s.io/$name" \
  --namespace="$namespace" \
  --output=jsonpath='{.metadata.uid}')

# Provisions external resource dependencies and the deployer resources.
# We set the application as the owner for all of these resources.
echo "${parameters}" \
  | provision.py \
    --values_mode=stdin \
    --deployer_image="${deployer}" \
    --deployer_entrypoint="${entrypoint}" \
    --image_pull_secret="${image_pull_secret}" \
  | set_app_labels.py \
    --manifests=- \
    --dest=- \
    --name="${name}" \
    --namespace="${namespace}" \
  | set_ownership.py \
    --manifests=- \
    --dest=- \
    --noapp \
    --app_name="${name}" \
    --app_uid="${app_uid}" \
    --app_api_version="${app_version}" \
  | kubectl apply \
    --namespace="$namespace" \
    --filename=-
